const std = @import("std");
const Framebuffer = @import("framebuffer.zig").Framebuffer;

// Simple 6x8 bitmap font for ASCII characters
const FONT_WIDTH = 6;
const FONT_HEIGHT = 8;

// Extended font data including letters A-Z
const CHAR_OFFSET = 32; // Start at space character

const FONT_DATA = [_][FONT_HEIGHT]u8{
    // Space (32)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 },
    // 33-47 (punctuation - simplified)
    .{ 0b001100, 0b001100, 0b001100, 0b001100, 0b001100, 0b000000, 0b001100, 0b000000 }, // !
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // " (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // # (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // $ (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // % (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // & (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // ' (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // ( (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // ) (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // * (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // + (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b001100, 0b001100, 0b011000 }, // , (44)
    .{ 0b000000, 0b000000, 0b000000, 0b111111, 0b000000, 0b000000, 0b000000, 0b000000 }, // - (45)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b001100, 0b001100, 0b000000 }, // . (46)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // / (skip)
    // 0-9 (48-57)
    .{ 0b000000, 0b011100, 0b100010, 0b100110, 0b101010, 0b110010, 0b100010, 0b011100 }, // 0
    .{ 0b000000, 0b001000, 0b011000, 0b001000, 0b001000, 0b001000, 0b001000, 0b111110 }, // 1
    .{ 0b000000, 0b011100, 0b100010, 0b000010, 0b001100, 0b110000, 0b100000, 0b111110 }, // 2
    .{ 0b000000, 0b011100, 0b100010, 0b000010, 0b001100, 0b000010, 0b100010, 0b011100 }, // 3
    .{ 0b000000, 0b000100, 0b001100, 0b010100, 0b100100, 0b111110, 0b000100, 0b000100 }, // 4
    .{ 0b000000, 0b111110, 0b100000, 0b111100, 0b000010, 0b000010, 0b100010, 0b011100 }, // 5
    .{ 0b000000, 0b001110, 0b010000, 0b100000, 0b111100, 0b100010, 0b100010, 0b011100 }, // 6
    .{ 0b000000, 0b111110, 0b000010, 0b000100, 0b001000, 0b010000, 0b010000, 0b010000 }, // 7
    .{ 0b000000, 0b011100, 0b100010, 0b100010, 0b011100, 0b100010, 0b100010, 0b011100 }, // 8
    .{ 0b000000, 0b011100, 0b100010, 0b100010, 0b011110, 0b000010, 0b000100, 0b111000 }, // 9
    .{ 0b000000, 0b000000, 0b011000, 0b011000, 0b000000, 0b011000, 0b011000, 0b000000 }, // : (58)
    // 59-64 (skip to A)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // ; (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // < (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // = (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // > (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // ? (skip)
    .{ 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000, 0b000000 }, // @ (skip)
    // A-Z (65-90)
    .{ 0b000000, 0b011100, 0b100010, 0b100010, 0b111110, 0b100010, 0b100010, 0b100010 }, // A
    .{ 0b000000, 0b111100, 0b100010, 0b100010, 0b111100, 0b100010, 0b100010, 0b111100 }, // B
    .{ 0b000000, 0b011100, 0b100010, 0b100000, 0b100000, 0b100000, 0b100010, 0b011100 }, // C
    .{ 0b000000, 0b111100, 0b100010, 0b100010, 0b100010, 0b100010, 0b100010, 0b111100 }, // D
    .{ 0b000000, 0b111110, 0b100000, 0b100000, 0b111100, 0b100000, 0b100000, 0b111110 }, // E
    .{ 0b000000, 0b111110, 0b100000, 0b100000, 0b111100, 0b100000, 0b100000, 0b100000 }, // F
    .{ 0b000000, 0b011100, 0b100010, 0b100000, 0b101110, 0b100010, 0b100010, 0b011100 }, // G
    .{ 0b000000, 0b100010, 0b100010, 0b100010, 0b111110, 0b100010, 0b100010, 0b100010 }, // H
    .{ 0b000000, 0b111110, 0b001000, 0b001000, 0b001000, 0b001000, 0b001000, 0b111110 }, // I
    .{ 0b000000, 0b111110, 0b000010, 0b000010, 0b000010, 0b000010, 0b100010, 0b011100 }, // J
    .{ 0b000000, 0b100010, 0b100100, 0b101000, 0b110000, 0b101000, 0b100100, 0b100010 }, // K
    .{ 0b000000, 0b100000, 0b100000, 0b100000, 0b100000, 0b100000, 0b100000, 0b111110 }, // L
    .{ 0b000000, 0b100010, 0b110110, 0b101010, 0b100010, 0b100010, 0b100010, 0b100010 }, // M
    .{ 0b000000, 0b100010, 0b110010, 0b101010, 0b100110, 0b100010, 0b100010, 0b100010 }, // N
    .{ 0b000000, 0b011100, 0b100010, 0b100010, 0b100010, 0b100010, 0b100010, 0b011100 }, // O
    .{ 0b000000, 0b111100, 0b100010, 0b100010, 0b111100, 0b100000, 0b100000, 0b100000 }, // P
    .{ 0b000000, 0b011100, 0b100010, 0b100010, 0b100010, 0b101010, 0b100100, 0b011110 }, // Q
    .{ 0b000000, 0b111100, 0b100010, 0b100010, 0b111100, 0b101000, 0b100100, 0b100010 }, // R
    .{ 0b000000, 0b011100, 0b100010, 0b100000, 0b011100, 0b000010, 0b100010, 0b011100 }, // S
    .{ 0b000000, 0b111110, 0b001000, 0b001000, 0b001000, 0b001000, 0b001000, 0b001000 }, // T
    .{ 0b000000, 0b100010, 0b100010, 0b100010, 0b100010, 0b100010, 0b100010, 0b011100 }, // U
    .{ 0b000000, 0b100010, 0b100010, 0b100010, 0b100010, 0b100010, 0b010100, 0b001000 }, // V
    .{ 0b000000, 0b100010, 0b100010, 0b100010, 0b100010, 0b101010, 0b110110, 0b100010 }, // W
    .{ 0b000000, 0b100010, 0b100010, 0b010100, 0b001000, 0b010100, 0b100010, 0b100010 }, // X
    .{ 0b000000, 0b100010, 0b100010, 0b010100, 0b001000, 0b001000, 0b001000, 0b001000 }, // Y
    .{ 0b000000, 0b111110, 0b000010, 0b000100, 0b001000, 0b010000, 0b100000, 0b111110 }, // Z
};

pub fn drawChar(framebuffer: *Framebuffer, ch: u8, x: i32, y: i32, color: u32) void {
    if (ch < 32 or ch > 90) return; // Support space through Z

    const char_index = ch - 32;
    if (char_index >= FONT_DATA.len) return;

    const font_char = FONT_DATA[char_index];

    for (0..FONT_HEIGHT) |row| {
        for (0..FONT_WIDTH) |col| {
            if ((font_char[row] >> @intCast(FONT_WIDTH - 1 - col)) & 1 == 1) {
                framebuffer.setPixel(x + @as(i32, @intCast(col)), y + @as(i32, @intCast(row)), color);
            }
        }
    }
}

pub fn drawString(framebuffer: *Framebuffer, text: []const u8, x: i32, y: i32, color: u32) void {
    var char_x = x;
    for (text) |ch| {
        drawChar(framebuffer, ch, char_x, y, color);
        char_x += FONT_WIDTH;
    }
}

pub fn drawNumber(framebuffer: *Framebuffer, number: anytype, x: i32, y: i32, color: u32) void {
    var buffer: [32]u8 = undefined;
    const text = std.fmt.bufPrint(&buffer, "{d}", .{number}) catch return;
    drawString(framebuffer, text, x, y, color);
}

pub fn drawFloat(framebuffer: *Framebuffer, number: f32, decimals: u8, x: i32, y: i32, color: u32) void {
    var buffer: [32]u8 = undefined;
    const text = switch (decimals) {
        0 => std.fmt.bufPrint(&buffer, "{d:.0}", .{number}) catch return,
        1 => std.fmt.bufPrint(&buffer, "{d:.1}", .{number}) catch return,
        2 => std.fmt.bufPrint(&buffer, "{d:.2}", .{number}) catch return,
        else => std.fmt.bufPrint(&buffer, "{d:.1}", .{number}) catch return,
    };
    drawString(framebuffer, text, x, y, color);
}
